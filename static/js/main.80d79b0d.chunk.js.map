{"version":3,"sources":["hooks/index.ts","redux/slices/todoSlice.ts","api/todoAPI.ts","components/AppIconButtons.tsx","components/TodoList/AddTodo.tsx","components/TodoList/TodoFilter.tsx","components/TodoList/TodoItem.tsx","components/TodoList/TodoList.tsx","themes/index.ts","App.tsx","redux/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","fetchRandomTodos","createAsyncThunk","numberToFetech","a","axios","get","response","fetechedTodos","data","slice","normalizedTodos","map","todo","id","uuidv4","desc","title","isCompleted","completed","todoSlice","createSlice","name","initialState","todos","visibilityFilter","isLoading","reducers","addTodo","reducer","state","action","push","payload","prepare","removeTodo","idx","findIndex","splice","setTodoStatus","setVisbilityFilter","extraReducers","builder","addCase","pending","_action","fulfilled","concat","rejected","actions","selectTodos","selectIsTodosLoading","selectVisibilityFilter","selectRemainingTodoItemsLength","createSelector","filter","length","selectVisibleTodos","AppIconButton","props","onClick","style","color","IconButton","backgroundColor","Icon","useStyles","makeStyles","theme","createStyles","container","marginTop","spacing","AddTodo","dispatch","useState","todoDesc","setTodoDesc","classes","handleAddTodo","useCallback","Grid","className","TextField","variant","fullWidth","onChange","e","target","value","placeholder","InputProps","endAdornment","InputAdornment","position","_e","undefined","onKeyDown","key","filterBtn","marginLef","marginRight","availableFilters","TodoFilter","direction","alignItems","justify","Button","TodoItem","isShowRemoveIcon","setIsShowRemoveIcon","delayHandler","setDelayHandler","onMouseEnter","setTimeout","onMouseLeave","clearTimeout","ListItem","ListItemIcon","ListItemText","textDecoration","Typography","ListItemSecondaryAction","Divider","textAlign","marginBottom","TodoList","visibleTodos","remainingItemsLength","useEffect","Container","maxWidth","Array","fill","v","Skeleton","height","List","customTheme","createMuiTheme","palette","primary","main","teal","contrastText","typography","fontFamily","allVariants","App","ThemeProvider","rootReducer","combineReducers","todoReducer","persistConfig","version","storage","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","CssBaseline","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.80d79b0d.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../redux/store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {\n  createAsyncThunk,\n  createSelector,\n  createSlice,\n  PayloadAction,\n} from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\nimport { AppDispatch, RootState } from '../store';\nimport { fetchTodo } from '../../api/todoAPI';\n\nexport interface Todo {\n  id: string;\n  desc: string;\n  isCompleted: boolean;\n}\n\nexport type TodoVisibilityFilter = 'All' | 'Active' | 'Completed';\n\nexport interface TodoState {\n  todos: Todo[];\n  visibilityFilter: TodoVisibilityFilter;\n  isLoading: boolean;\n}\n\nconst initialState: TodoState = {\n  todos: [],\n  visibilityFilter: 'All',\n  isLoading: false,\n};\n\nexport const fetchRandomTodos = createAsyncThunk<\n  Todo[],\n  number,\n  {\n    dispatch: AppDispatch;\n    state: RootState;\n  }\n>('todo/fetchRandomTodos', async (numberToFetech) => {\n  const response = await fetchTodo();\n  const fetechedTodos = response.data.slice(0, numberToFetech);\n  const normalizedTodos: Todo[] = fetechedTodos.map((todo) => ({\n    id: uuidv4(),\n    desc: todo.title,\n    isCompleted: todo.completed,\n  }));\n  return normalizedTodos;\n});\n\nconst todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    addTodo: {\n      reducer: (state, action: PayloadAction<Todo>) => {\n        state.todos.push(action.payload);\n      },\n      prepare: (desc: string) => ({\n        payload: {\n          id: uuidv4(),\n          desc,\n          isCompleted: false,\n        },\n      }),\n    },\n    removeTodo(state, action: PayloadAction<string>) {\n      const idx = state.todos.findIndex((todo) => todo.id === action.payload);\n      state.todos.splice(idx, 1);\n    },\n    setTodoStatus(\n      state,\n      action: PayloadAction<{ id: string; isCompleted: boolean }>\n    ) {\n      const idx = state.todos.findIndex(\n        (todo) => todo.id === action.payload.id\n      );\n      state.todos[idx].isCompleted = action.payload.isCompleted;\n    },\n    setVisbilityFilter(state, action: PayloadAction<TodoVisibilityFilter>) {\n      state.visibilityFilter = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchRandomTodos.pending, (state, _action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchRandomTodos.fulfilled, (state, action) => {\n      state.todos = state.todos.concat(action.payload);\n      state.isLoading = false;\n    });\n    builder.addCase(fetchRandomTodos.rejected, (state, _action) => {\n      state.isLoading = false;\n    });\n  },\n});\n\nexport const { addTodo, removeTodo, setTodoStatus, setVisbilityFilter } =\n  todoSlice.actions;\n\nexport const selectTodos = (state: RootState) => state.todo.todos;\nexport const selectIsTodosLoading = (state: RootState) => state.todo.isLoading;\nexport const selectVisibilityFilter = (state: RootState) =>\n  state.todo.visibilityFilter;\nexport const selectRemainingTodoItemsLength = createSelector(\n  selectTodos,\n  (todos) => {\n    return todos.filter((todo) => !todo.isCompleted).length;\n  }\n);\nexport const selectVisibleTodos = createSelector(\n  [selectTodos, selectVisibilityFilter],\n  (todos, visibilityFilter) => {\n    switch (visibilityFilter) {\n      case 'Active':\n        return todos.filter((todo) => !todo.isCompleted);\n      case 'Completed':\n        return todos.filter((todo) => todo.isCompleted);\n      case 'All':\n        return todos;\n    }\n  }\n);\n\nexport default todoSlice.reducer;\n","import axios from 'axios';\n\ninterface ToDoResponse {\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\nexport function fetchTodo() {\n  return axios.get<ToDoResponse[]>(\n    'https://jsonplaceholder.typicode.com/todos'\n  );\n}\n","import { IconButton, PropTypes } from '@material-ui/core';\nimport Icon from '@material-ui/core/Icon';\n\ninterface AppIconButtonProps {\n  name: string;\n  onClick: React.MouseEventHandler<HTMLButtonElement>;\n  style?: React.CSSProperties;\n  color?: PropTypes.Color;\n}\n\nexport function AppIconButton(props: AppIconButtonProps) {\n  const { name, onClick, style, color } = props;\n  return (\n    <IconButton onClick={onClick} style={{ backgroundColor: 'transparent' }}>\n      <Icon style={style} color={color}>\n        {name}\n      </Icon>\n    </IconButton>\n  );\n}\n","import {\n  createStyles,\n  Grid,\n  InputAdornment,\n  makeStyles,\n  TextField,\n  Theme,\n} from '@material-ui/core';\nimport React, { useCallback, useState } from 'react';\nimport { useAppDispatch } from '../../hooks';\nimport { addTodo } from '../../redux/slices/todoSlice';\nimport { AppIconButton } from '../AppIconButtons';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      marginTop: theme.spacing(2),\n    },\n  })\n);\n\nexport function AddTodo() {\n  const dispatch = useAppDispatch();\n  const [todoDesc, setTodoDesc] = useState<string>('');\n  const classes = useStyles();\n\n  const handleAddTodo = useCallback(() => {\n    if (todoDesc) {\n      dispatch(addTodo(todoDesc));\n      setTodoDesc('');\n    }\n  }, [dispatch, todoDesc]);\n\n  return (\n    <Grid className={classes.container}>\n      <TextField\n        variant=\"outlined\"\n        fullWidth\n        onChange={(e) => setTodoDesc(e.target.value)}\n        value={todoDesc}\n        placeholder=\"What needs to be done?\"\n        InputProps={{\n          endAdornment: todoDesc ? (\n            <InputAdornment position=\"end\">\n              <AppIconButton\n                name=\"add_circle\"\n                color=\"primary\"\n                onClick={(_e) => {\n                  handleAddTodo();\n                }}\n              />\n            </InputAdornment>\n          ) : undefined,\n        }}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter') {\n            handleAddTodo();\n          }\n        }}\n      />\n    </Grid>\n  );\n}\n","import {\n  Button,\n  createStyles,\n  Grid,\n  makeStyles,\n  Theme,\n} from '@material-ui/core';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../hooks';\nimport {\n  selectVisibilityFilter,\n  setVisbilityFilter,\n  TodoVisibilityFilter,\n} from '../../redux/slices/todoSlice';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    filterBtn: {\n      marginLef: theme.spacing(1),\n      marginRight: theme.spacing(1),\n    },\n  })\n);\n\nconst availableFilters: TodoVisibilityFilter[] = ['All', 'Active', 'Completed'];\n\nexport function TodoFilter() {\n  const visibilityFilter = useAppSelector(selectVisibilityFilter);\n  const classes = useStyles();\n  const dispatch = useAppDispatch();\n\n  return (\n    <Grid container direction=\"row\" alignItems=\"center\" justify=\"center\">\n      {availableFilters.map((filter) => {\n        return (\n          <Button\n            key={`todoFilter-${filter}`}\n            variant={visibilityFilter === filter ? 'contained' : 'outlined'}\n            color={visibilityFilter === filter ? 'primary' : undefined}\n            onClick={() => {\n              dispatch(setVisbilityFilter(filter));\n            }}\n            className={classes.filterBtn}\n          >\n            {filter}\n          </Button>\n        );\n      })}\n    </Grid>\n  );\n}\n","import {\n  Divider,\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n  Typography,\n} from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { useAppDispatch } from '../../hooks';\nimport {\n  removeTodo,\n  setTodoStatus,\n  Todo as TodoModel,\n} from '../../redux/slices/todoSlice';\nimport { AppIconButton } from '../AppIconButtons';\n\ninterface TodoItemProps {\n  data: TodoModel;\n}\n\nexport function TodoItem(props: TodoItemProps) {\n  const { id, desc, isCompleted } = props.data;\n  const [isShowRemoveIcon, setIsShowRemoveIcon] = useState(false);\n  const [delayHandler, setDelayHandler] = useState<any>(null);\n  const dispatch = useAppDispatch();\n  return (\n    <div\n      onMouseEnter={() => {\n        setDelayHandler(\n          setTimeout(() => {\n            setIsShowRemoveIcon(true);\n          }, 100)\n        );\n      }}\n      onMouseLeave={() => {\n        clearTimeout(delayHandler);\n        if (isShowRemoveIcon) {\n          setIsShowRemoveIcon(false);\n        }\n      }}\n    >\n      <ListItem key={id}>\n        <ListItemIcon>\n          <AppIconButton\n            name={isCompleted ? 'check_circle' : 'radio_button_unchecked'}\n            color={isCompleted ? 'primary' : undefined}\n            onClick={(e) => {\n              dispatch(\n                setTodoStatus({\n                  id,\n                  isCompleted: !isCompleted,\n                })\n              );\n            }}\n          />\n        </ListItemIcon>\n        <ListItemText\n          style={{\n            textDecoration: isCompleted ? 'line-through' : 'none',\n          }}\n        >\n          <Typography>{desc}</Typography>\n        </ListItemText>\n        <ListItemSecondaryAction>\n          {isShowRemoveIcon && (\n            <AppIconButton\n              name=\"close\"\n              onClick={(e) => {\n                dispatch(removeTodo(id));\n              }}\n            />\n          )}\n        </ListItemSecondaryAction>\n      </ListItem>\n      <Divider />\n    </div>\n  );\n}\n","import {\n  Container,\n  createStyles,\n  List,\n  makeStyles,\n  Theme,\n  Typography,\n} from '@material-ui/core';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport React, { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../hooks';\nimport {\n  fetchRandomTodos,\n  selectIsTodosLoading,\n  selectRemainingTodoItemsLength,\n  selectTodos,\n  selectVisibleTodos,\n} from '../../redux/slices/todoSlice';\nimport { AddTodo } from './AddTodo';\nimport { TodoFilter } from './TodoFilter';\nimport { TodoItem } from './TodoItem';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textAlign: 'center',\n      marginTop: theme.spacing(3),\n      marginBottom: theme.spacing(1),\n    },\n  })\n);\n\nconst initialTodosToFetch = 10;\n\nexport function TodoList() {\n  // const { visibilityFilter, todos, isLoading } = useAppSelector(selectTodos);\n  const todos = useAppSelector(selectTodos);\n  const isLoading = useAppSelector(selectIsTodosLoading);\n  const visibleTodos = useAppSelector(selectVisibleTodos);\n  const remainingItemsLength = useAppSelector(selectRemainingTodoItemsLength);\n  const dispatch = useAppDispatch();\n  const classes = useStyles();\n\n  useEffect(() => {\n    if (todos.length === 0) {\n      dispatch(fetchRandomTodos(initialTodosToFetch));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Typography variant=\"h3\" className={classes.title}>\n        React Todo Demo\n      </Typography>\n      <TodoFilter />\n      <AddTodo />\n      {isLoading ? (\n        Array(initialTodosToFetch)\n          .fill(1)\n          .map((v, idx) => {\n            return <Skeleton key={`skeleton-${idx}`} height={64} />;\n          })\n      ) : (\n        <List>\n          {visibleTodos.map((todo) => (\n            <TodoItem data={todo} />\n          ))}\n        </List>\n      )}\n      <>\n        <Typography>\n          {remainingItemsLength} item{remainingItemsLength > 1 && 's'} left\n        </Typography>\n      </>\n    </Container>\n  );\n}\n","import { createMuiTheme } from '@material-ui/core';\nimport { teal } from '@material-ui/core/colors';\n\nexport const customTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: teal[500],\n      contrastText: '#fff',\n    },\n  },\n  typography: {\n    fontFamily: 'sans-serif',\n    allVariants: {\n      color: '#2D3748',\n    },\n  },\n});\n","import { ThemeProvider } from '@material-ui/core';\nimport React from 'react';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { customTheme } from './themes';\n\nfunction App() {\n  return (\n    <ThemeProvider theme={customTheme}>\n      <TodoList />;\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import {\n  configureStore,\n  getDefaultMiddleware,\n  ThunkAction,\n  Action,\n  combineReducers,\n} from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport todoReducer from './slices/todoSlice';\n\nconst rootReducer = combineReducers({\n  todo: todoReducer,\n});\n\nconst persistConfig = {\n  key: 'root',\n  version: 1,\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n});\n\nexport let persistor = persistStore(store);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CssBaseline } from '@material-ui/core';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport './index.css';\nimport { persistor, store } from './redux/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}